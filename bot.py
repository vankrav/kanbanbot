from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import sqlite3
from datetime import datetime, timedelta
from config import TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('kanban.db')
    c = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    c.execute('DROP TABLE IF EXISTS tasks')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  task_text TEXT,
                  status TEXT,
                  created_at TIMESTAMP)''')
    conn.commit()
    conn.close()

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –¥–ª—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏
STATUSES = ['To Do', 'In Progress', 'Done']

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
MAIN_KEYBOARD = ReplyKeyboardMarkup([
    [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
    [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
], resize_keyboard=True)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
MAX_MESSAGES = 3

async def cleanup_messages(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_MESSAGES"""
    if 'message_history' not in context.user_data:
        context.user_data['message_history'] = []
    
    messages = context.user_data['message_history']
    while len(messages) > MAX_MESSAGES:
        old_message = messages.pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await old_message.delete()
        except:
            pass

async def add_message_to_history(message, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ"""
    if 'message_history' not in context.user_data:
        context.user_data['message_history'] = []
    
    context.user_data['message_history'].append(message)
    await cleanup_messages(context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–Ω–±–∞–Ω-–±–æ—Ç!\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
        '/board - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫—É\n'
        '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
        reply_markup=MAIN_KEYBOARD
    )

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    if not context.args:
        context.user_data['waiting_for_task'] = True
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É
    task_text = ' '.join(context.args)
    await create_task(update, context, task_text)

async def create_task(update: Update, context: ContextTypes.DEFAULT_TYPE, task_text: str):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('kanban.db')
    c = conn.cursor()
    c.execute('INSERT INTO tasks (user_id, task_text, status, created_at) VALUES (?, ?, ?, ?)',
              (user_id, task_text, 'To Do', datetime.now()))
    conn.commit()
    conn.close()
    
    message = await update.message.reply_text(f'‚úÖ –ó–∞–¥–∞—á–∞ "{task_text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É "To Do"')
    await add_message_to_history(message, context)
    await show_board(update, context)

async def show_board(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'last_board_message' in context.user_data:
        try:
            await context.user_data['last_board_message'].delete()
        except:
            pass
    
    user_id = update.effective_user.id
    conn = sqlite3.connect('kanban.db')
    c = conn.cursor()
    
    keyboard = []
    
    for status in STATUSES:
        c.execute('SELECT id, task_text FROM tasks WHERE user_id = ? AND status = ?',
                 (user_id, status))
        tasks = c.fetchall()
        
        keyboard.append([InlineKeyboardButton(f"üìå {status}", callback_data="header")])
        
        if tasks:
            for task_id, task_text in tasks:
                keyboard.append([InlineKeyboardButton(
                    f"‚Ä¢ {task_text}", 
                    callback_data=f"task_{task_id}"
                )])
        else:
            keyboard.append([InlineKeyboardButton("–ù–µ—Ç –∑–∞–¥–∞—á", callback_data="empty")])
        
        if status != STATUSES[-1]:
            keyboard.append([InlineKeyboardButton("‚éØ‚éØ‚éØ‚éØ‚éØ", callback_data="divider")])

    conn.close()
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text(
        "üéØ –í–∞—à–∞ –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:",
        reply_markup=reply_markup
    )
    await add_message_to_history(message, context)
    context.user_data['last_board_message'] = message

def create_task_actions_keyboard(task_id):
    keyboard = [
        [
            InlineKeyboardButton("‚¨ÖÔ∏è To Do", callback_data=f"move_{task_id}_To Do"),
            InlineKeyboardButton("‚ñ∂Ô∏è In Progress", callback_data=f"move_{task_id}_In Progress"),
            InlineKeyboardButton("‚úÖ Done", callback_data=f"move_{task_id}_Done")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{task_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_board")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if query.data == "header" or query.data == "empty" or query.data == "divider":
        await query.answer()
        return
    
    if query.data == "back_to_board":
        await show_board(update, context)
        return
    
    action = query.data.split('_')[0]
    
    conn = sqlite3.connect('kanban.db')
    c = conn.cursor()
    
    if action == "task":
        task_id = query.data.split('_')[1]
        task_text, status = c.execute(
            'SELECT task_text, status FROM tasks WHERE id = ?', 
            (task_id,)
        ).fetchone()
        conn.close()
        
        keyboard = create_task_actions_keyboard(task_id)
        message = await query.message.edit_text(
            f"üìù –ó–∞–¥–∞—á–∞: {task_text}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await add_message_to_history(message, context)
        await query.answer()
        return
    
    elif action == "move":
        _, task_id, new_status = query.data.split('_')
        c.execute('UPDATE tasks SET status = ? WHERE id = ?', (new_status, task_id))
        conn.commit()
        conn.close()
        message = await update.effective_message.reply_text(f'‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {new_status}')
        await add_message_to_history(message, context)
        await show_board(update, context)
    
    elif action == "delete":
        task_id = query.data.split('_')[1]
        c.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
        conn.commit()
        conn.close()
        message = await update.effective_message.reply_text('üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
        await add_message_to_history(message, context)
        await show_board(update, context)
    
    elif action == "edit":
        task_id = query.data.split('_')[1]
        context.user_data['editing_task'] = task_id
        message = await update.effective_message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:')
        await add_message_to_history(message, context)
        conn.close()
        await query.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def handle_edit_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    try:
        await update.message.delete()
    except:
        pass

    if 'editing_task' not in context.user_data:
        return
    
    task_id = context.user_data['editing_task']
    new_text = update.message.text
    
    conn = sqlite3.connect('kanban.db')
    c = conn.cursor()
    c.execute('UPDATE tasks SET task_text = ? WHERE id = ?', (new_text, task_id))
    conn.commit()
    conn.close()
    
    del context.user_data['editing_task']
    await update.message.reply_text('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    await show_board(update, context)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_task'):
        del context.user_data['waiting_for_task']
        await create_task(update, context, text)
        return
    
    if text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É":
        await show_board(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data['waiting_for_task'] = True
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await start(update, context)
    elif 'editing_task' in context.user_data:
        await handle_edit_message(update, context)

def main():
    init_db()
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("add", add_task))
    application.add_handler(CommandHandler("board", show_board))
    application.add_handler(CallbackQueryHandler(handle_button))
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main() 